#!/bin/bash

#funcitons
setup() {
  echo "Have you setup snapper? [Y/N], (choosing N will configure it)"
  read $input1
  if [  "$input1" = "N"  ]; then
    /usr/bin/snapper -c
    /usr/bin/systemctl enable snapper-boot.timer
    /usr/bin/systemctl enable snapper-cleanup.timer
    echo "Snapper setup!"
  else
    echo "Look at you, being prepared and all"
    echo " "
  fi
  echo "Is there anything from the defaults you would like to change? [Y/N]"
  read $input2
  if [[ "$input2" = "Y" ]]; then
    set_cutom_variables
  else
    echo "Great! We're ready to go!"
  fi
}

# set_custom_variables() {
#
# }
print_help () {
  echo "options for snapper-menu-update:"
  echo "-r, --run: just runs the script with either the defaults or what you have setup"
  echo "-s, --setup: sets up what to use as the variables for the file name, etc; makes sure snapper is configured"
  echo "-h, --help: prints this message"
}
grep=/usr/bin/grep

grab_from_loader() {
  $grep "$1" $DEFAULT_LOADER
}
default_variables() {
TITLE="Well crap . . ."
LOADER_FOLDER="/boot/loader"
TARGET_FILE="$LOADER_FOLDER/entries/boot_snapshot.conf"
#Sets up an array to parse the default loader
defualt_loader_array=( $($grep default $LOADER_FOLDER/loader.conf) )
#Set the default loader
DEFAULT_LOADER="$LOADER_FOLDER/entries/${defualt_loader_array[1]}.conf"
}

#This switch statement merely signals what part of the command to run
case "$1" in
  "-h" | "--help")
  print_help
  ;;
  "-s" | "--setup")
  setup
  ;;
  "-r" | "--run")
  run
  ;;
  * )
  echo "command not recongized, try -h or --help for more"
  ;;
esac
#These are default variables you should looks at changing first:
run() {

#Array of latest boot snapshots
latestboot_array=( $(/usr/bin/snapper -c root list |
$grep boot |
/usr/bin/cut -b -5 |
/usr/bin/sort -nr))
# All just things snatched from the default loader

OPTIONS=$(grab_from_loader options)
LINUX=$(grab_from_loader "linux ")
INITRD=$( (grab_from_loader initrd) )
# The only way I could figure out to make sure all the initrd options are
# Carried over. If you have any suggestions please, by all means, let me know
declare -a initrd_files
# This checks the INITRD array for all of the entries which are not the word "initrd" and
# adds them to the initrd_files array
for i in ${INITRD[@]}; do
  if [ "$i" != "initrd" ]; then
    initrd_files+=($i)
  fi
done
# This is to get the subvolume which the root is on
ROOT_SUBVOL_STNG=$(/usr/bin/btrfs sub get-default / )
ROOT_SUBVOL=${ROOT_SUBVOL_STNG##*path }
#### Done with viable declarations #####
#Now is the time to write to the file
#One carrot here to overwrite file

echo "title $TITLE (snapshot # ${latestboot_array[0]} )" > $1
#The rest are 2 carrots to just cat onto the end of the file
echo $LINUX >> $1
#Copies the initrd files one line at a time
for i in ${initrd_files[@]}; do
  echo "initrd "$i" " >> $1
done
# Just adds the rootflag option at the end
echo "$OPTIONS rootflags=subvol=$ROOT_SUBVOL/.snapshots/${latestboot_array[0]}" >> $1
}
